

UNICIDAD **********************************************************************************************
	
	Verificamos en la gramatica donde existen posibles declaraciones de metodos y de variables.
	
	Codeamos los posibles caminos para llegar a una declaracion de metodo o de variable.

	No pueden existir más de una declaración de método o variable dos veces con el mismo nombre.

	Field Declaration:

		Como field declaration se puede usar no solo al principio, si no que luego en method call, entonces
		recibimos como parametro una tabla, la tabla en el actual scope, para la parte de la gramatica:
		start: (callout_decl)* (field_decl)* (method_decl)*  la tabla que recibe sera la tabla 
		padre(obviamente)

		Para los arreglos se hace caso omiso del valor del tamano del arreglo, solamente tomamos el nombre de la variable y verificamos en la tabla que no existiera y se agregaron como cualquier otra variable

		EJEMPLO 1: ACEPTADA

			int a, b, c, d;
			boolean e, f, g;

		EJEMPLO 2: RECHAZADA

			int a, b;
			boolean a[];

	Method Declaration:

		Empezamos a recorrer por methos declaration.



NOTA: Se agruparon las correspondientes clases a las siguientes reglas de produccion, por cuestion
  	  de sentido y significado:

  	  Res
  	  			#bin1
  	  Negation:
  	  			#bin2
  	  IntBinOp:
  	  			#bin3
  	  			#bin4
  	  ComparisonBinOp
  	  			#bin5
  	  			#bin6
  	  BooleanBinOp
  	  			#bin7
  	  			#bin8

  	  IntBinOp soporta:
		  	  			numeros, 
		  	  			variables que sean numeros

  	  ComparisonBinOp soporta:

  	  					numeros,
  	  					variables que sean numeros
  	  BooleanBinOp soporta:

  	  					booleans,
  	  					variables que sean booleanos
  	  					expresiones que devuelvan booleanos (ComparisonBinOp)

  	  Negation:

bin_op:
    RES bin_op             										             #bin1
  | NO bin_op           													 #bin2
  | bin_op (MULT|DIV|PRCNT) bin_op             								 #bin3		
  | bin_op (PLUS|RES) bin_op             									 #bin4
  | bin_op (MENOR|MAYOR|MENORIGUAL|MAYORIGUAL) bin_op             			 #bin5							
  | bin_op (DIG|NOIGUAL) bin_op                                              #bin6
  | bin_op AND bin_op                                                        #bin7
  | bin_op OR bin_op            								             #bin8
  | expr2                                                                    #bin9
   ;



   Habia una clase llamada Statement1 se cambio de nombre a Asignation, ya que es mas representativo 
   y asi sucesivamente se fue cambiando. Para mas detalles se puede ver en los comentarios en la regla
   de produccion de statement, a cada identificador le corresponde una clase. Anteriormente llamadas
   Statement1, Statement2... y asi sucesivamente.

Para las clasese IfStatement, WhileStatement, ForStatement se crea un nuevo scope (un objeto Table) con el padre que recibe de parametro en el metodo, PERO sin guardar esa tabla en el arbol de tablas, o sea se van a declarar las variables, se hacen todos los chequeos, pero al salir de ese scope, ya no se usan mas y deja de existir la tabla.

IfStatement:======================================

	se crea un scope para la seccion de codigo si la condicion es true
	y otro scope para la seccion de codigo si la condicion es false 


	PRUEBA SUPERADA: cada variabla a en su propio scope, todo bien

	boolean b;
	int a(){
	    int a;
	    if(d){
	      int a;
	      if(s){
	        int a;
	      }
	    }else{
	      boolean a;
	    }

	}

ForStatement:===================================

	PRUEBA SUPERADA:	Error esperado, todo bien

		boolean b;
		int a(){
		    int a;
		    for(a = 3, f){
		      int a;
		      boolean a;
		    }

		}


	PRUEBA SUPERADA:	cada variabla a en su propio scope, todo bien

		boolean b;
		int a(){
		    int a;
		    for(a = 3, f){
		      int a;
		      if(d){
		        int a;
		      }else{
		        int a;
		      }
		    }
		}

WhileStatement: =================================

	PRUEBA SUPERADA: error esperado en el scope de while, todo bien

		boolean b;
		int a(){
		    int a;
		    while(s){
		      int a;
		      boolean a;
		    }
		}

	PRUEBA SUPERADA: cada variable en su propio scope, todo bien

		boolean b;
		int a(){
		    int a;
		    while(s){
		      int a;
		    }
		}

	PRUEBA SUPERADA: combinacion con while, if y for, todo bien

	boolean b;
	int a(){
	    int a;
	    for(a = 3, g){

	      if(x){
	        int a;
	        while(s){
	          int a;
	        }
	      }
	    
	    }
	}

OTRAS:


PRUEBA SUPERADA: dos funciones llamadas igual, rechazada, todo bien

	void a (){
	  

	}
	void a(){
	  a=3;
	}

PRUEBA SUPERADA: declaracion de una variable y declaracion de un metodo llamdas igual, rechazada, todo bien
	
	int a;
	void a (){
	  

	}



EXISTENCIA ***************************************************************************************
	
	PRUEBA SUPERADA: busca recursivamente la variable, primero en el entorno local y luego hasta llegar
					 al entorno mas alto.

	int a;
	void fun(){
		a = 3;
	}

	PRUEBA SUPERADA: "error: 'a' is not definied"

	void fun(){
		a = 3;
	}

	PRUEBA SUPERADA: una declaracion en el scope padre y una asignacion en scope utilizando varios scopes

	int a;
	void fun(){

	  while(d)
	  {

	    if(s){
	      a = 3;
	    }
	  }
	  
	}

NOTA: Importante cambio en la clase Table, por cuestiones de busqueda, en la funcion "containsKey" recibia una variable y la buscaba en las dos hashtables de Table (variables, funciones) y devolvia verdadero si encontraba la variable, pero esto tiene un inconveniente, se explica con un ejemplo:

int a (){
  
}
void fun(){
  a=3;
}

como la funcion se guardo en la hashtable "funciones" cuando se busque "a", no va a dar problema lo que si deberia de dar problema.

La solucion sera crear dos fuciones, una que busque en la hashtable "variables" para las variables, y otra que busque en "funciones" para las funciones.

En otras palabras containsKey se separara en dos, en containsVar y en containsFun y cada una buscara en la que le corresponda.

PRUEBA SUPERADA: error en la llamada de funcion, no existe la declaracion de f

	int a;

	void fun (){
	    a[f()]=1;
	  
	}

PRUEBA SUPERADA: error porque la funcion d y h y la variable k no estan definidas

	int a;
	int f(){
	}
	void fun (){
	    a[f(d(),h(),k)]=1;
	  
	}

A CONTINUACION DESCRIBIREMOS LO QUE VAMOS A IMPLEMENTAR PARA LA SIGUIENTE PARTE DE LA GRAMATICA

location puede tener un expr, ese expr puede tener un location y un method_call, eso ya esta implementado, ahora lo que vamos a implementar van a ser los bin_op, cada bin_op (bin1, bin2, etc.) devuelve un tipo de objeto, excepto el bin9, cada uno de esos tiene otra vez bin_op entonces hay que hacer la llamada al visit que corresponda y al final de cuentas se debe de elegir un expr2 que puede ser location o method_call

cada visit de estos binop puede llamar a cualquier tipo de binop.


location: (ID | ID LSBRACKET expr RSBRACKET)           #loc;

expr:             																		                 
   location               																		                  
  | method_call          																		                  
  | literal                      																              
  | bin_op             																		               
   ;               

bin_op:
    RES bin_op             				  				#bin1
  | NO bin_op           				 				#bin2
  | bin_op (MULT|DIV|PRCNT) bin_op        				#bin3		
  | bin_op (PLUS|RES) bin_op           	 	 			#bin4
  | bin_op (MENOR|MAYOR|MENORIGUAL|MAYORIGUAL) bin_op   #bin5											
  | bin_op (DIG|NOIGUAL) bin_op                         #bin6
  | bin_op AND bin_op                                   #bin7
  | bin_op OR bin_op            						#bin8
  | expr2                                               #bin9
   ;

expr2:
    location                                                                
  | method_call                                                             
  | literal
  ;


Ya se recorrieron todos los posibles caminos para verificar si una variabla o una funcion existen. Todo bien :)